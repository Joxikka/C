int suma_GD(int a[][MAX],int n,int m)
{
    int i,s=0;
    for (i=0;i<n;i++)
        s+=a[i][i];
    return s;
}

----------------------------------------------------------------------------------------------------------

float AS_ispod_GD(int a[][MAX],int n,int m)
{
    int i,j,br=0,s=0;
    for (i=1;i<n;i++){
      for(j=0;j<i;j++)
        if (a[i][j]%2==0)
        {
            s+=a[i][j];
            br++;
        }
    }
    return (float)s/br;
}

----------------------------------------------------------------------------------------------------------

void unos(int a[], int n)
{
  for(int i=0;i<n;i++)
    scanf("%d",&a[i]);
}

void mnozenje(int a[],int n,int b[],int m,int c[100][100])
{
  for(int i=0;i<n;i++){
        for (int j=0;j<m;j++){
            c[i][j]=a[i]*b[j];
            printf("%d",c[i][j]);
        }
  }
  printf("\n");
}

int main()
{
  int a[50], b[50], n, m;
  scanf("%d%d",&n,&m);
  unos(a,n);
  unos(b,m);
  int c[100][100];
  mnozenje(a,b,n,m,c);
}

----------------------------------------------------------------------------------------------------------

a)

void svi_kvarovi(int a[][100], int n, int m)
{
  int suma;
  for(int i=0;i<n;i++){
    suma=0;
    for(int j=0;j<m;j++){
      if(a[i][j]=1)
        suma++;
    }
    if(suma==m)
      printf("%d",i+1);
  }
}

b)

void k_kvarova(int a[][100], int n, int m, int k)
{
  int suma;
  for(int i=0;i<n;i++){
    suma=0;
    for(int j=0;j<m;j++){
      if(a[i][j]==1)
        suma++;
    }
    if(suma==k);
     br++
  }
  return br;
}

c)

void najcesci_kvar(int a[][100], int n, int m)
{
  int max=0, k=0, br;
  for(int j=0;j<m;j++){
    br=0;
    for(int i=0;i<n;i++){
      if(a[i][j]==1)
        br++;
    }
    if(br>max)
    {
      max=br;
      k=j;
    }
  }
  return k+1;
}

----------------------------------------------------------------------------------------------------------

int osnosimetricna(int a[][100], int n, int m)
{
  for(int i=0;i<n;i++){
    for(int j=0;j<m;j++){
      if(a[i][j]!=a[j][i])
        return 0;
    }
  }
  return 1;
} 
