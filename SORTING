void razmeni(int *a, int *b)
{
  int pom;
  pom=*a;
  *a=*b;
  *b=pom;
}

void selection_sort(int a[], int n)
{
  int i,j;
  for(i=0;i<n;i++)
  {
    for(j=i+1;j<n;j++)
    {
      if(a[i]>a[j])
        razmeni(&a[i],&a[j]);
    }
  }
}

-------------------------------------------------------------------------------------------------------

void bubble_sort1(int a[], int n)
{
  int i,j;
  for(i=n-1;i>0;i--)
  {
    for(j=0;j<i;j++)
    {
      if(a[j]>a[j+1])
        razmeni(&a[j],&a[j+1])
    }
  }
}

-------------------------------------------------------------------------------------------------------

void bubble_sort2(int a[], int n)
{
  int i,j;
  for(i=0;i<n-1;i++)
  {
    for(j=0;j<n-1;j++)
    {
      if(a[j]>a[j+1])
        razmeni(&a[j],a[j+1];
    }
  }
}

-------------------------------------------------------------------------------------------------------

void insertion_sort(int a[], int n)
{
  int i,j,element;
  for(i=1;i<n;i++)
  {
    element=a[i];
    j=i-1;
    while(j>=0 && a[j]>element)
    {
      a[j+1]=a[j];
      j--;
    }
    a[j+1]=element;
  }
}

-------------------------------------------------------------------------------------------------------

void merge(int a[], int l, int s, int d)
{
  int i,j,k;
  int n1=s-l+1;
  int n2=d-s;
  int L[n1], D[n2];
  for(i=0;i<n1;i++)
    L[i]=a[l+1];
  for(j=0;j<n2;j++)
    D[j]=a[s+1+j];
  i=j=0;
  k=l;
  while(i<n1 && j<n2)
  {
    if(L[i]<=D[j])
      a[k++]=L[i++];
    else
      a[k++]=D[j++];
  }
  while(i<n1)
    a[k++]=L[i++];
  while(j<n2)
    a[k++]=D[j++]
}

void merge_sort(int a[], int l, int d)
{
  if(l<d)
  {
    int s=l+(d-l)/2;
    merge_sort(a,l,s);
    merge_sort(a,s+1,d);
    merge(a,l,s,d);
  }
}

-------------------------------------------------------------------------------------------------------

void quick_sort(int a[], int l, int d)
{
  if(l<d)
  {
    int element=a[d];
    int i=l, j=d;
    while(i<j)
    {
      while(a[i]<element)
        i++;
      while(a[j]>=element)
        j--;
      if(i<j)
        razmeni(&a[i],&a[j]);
    }
    razmeni(&a[i],&a[d]);
    quick_sort(a,l,i-1);
    quick_sort(a,i+1,d);
  }
}

-------------------------------------------------------------------------------------------------------

void heap(int a[], int n, int i)
{
  int largest=i;
  int l=2*i+1;
  int r=2*i+2;
  if(l<n && a[l]>a[largest])
    largest=l;
  if(r<n && a[r]>a[largest])
    largest=r;
  if(largest!=i)
  {
    razmeni(&a[i],&a[largest]);
    heap(a,n,largest);
  }
}

void heap_sort(int a[], int n)
{
  for(int i=n/2-1;i>=0;i--)
    heap(a,n,i);
  for(int i=n-1;i>0;i--)
  {
    razmeni(&a[0],&a[i]);
    heap(a,i,0);
  }
}
